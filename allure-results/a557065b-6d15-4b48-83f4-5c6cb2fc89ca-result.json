{"name": "Get user me", "status": "broken", "statusDetails": {"message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateUserResponseSchema\nuser\n  Field required [type=missing, input_value={'detail': 'User with ema...ple.net already exists'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing", "trace": "public_users_client = <clients.users.public_users_client.PublicUsersClient object at 0x105b50050>\n\n    @pytest.fixture\n    def function_user(public_users_client: PublicUsersClient) -> UserFixture:\n        request = CreateUserRequestSchema()\n>       response = public_users_client.create_user(request)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nfixtures/users.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <clients.users.public_users_client.PublicUsersClient object at 0x105b50050>\nrequest = CreateUserRequestSchema(email='trodriguez@example.net', password='_8oSb(ujq9', last_name='Stewart', first_name='Brian', middle_name='Thomas')\n\n    def create_user(self, request: CreateUserRequestSchema) -> CreateUserResponseSchema:\n        response = self.create_user_api(request)\n>       return CreateUserResponseSchema.model_validate_json(response.text)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for CreateUserResponseSchema\nE       user\nE         Field required [type=missing, input_value={'detail': 'User with ema...ple.net already exists'}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\nclients/users/public_users_client.py:28: ValidationError"}, "attachments": [{"name": "log", "source": "07463f42-505e-4120-8a2c-9effc4dce735-attachment.txt", "type": "text/plain"}], "start": 1756415544279, "stop": 1756415544279, "uuid": "28d1d8d4-4bbd-465b-94b5-9dd3511ad960", "historyId": "31d6e52c7bb261f1e5403958c6bdb3c2", "testCaseId": "31d6e52c7bb261f1e5403958c6bdb3c2", "fullName": "tests.users.test_users.TestUsers#test_get_user_me", "labels": [{"name": "suite", "value": "Users"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "GET_ENTITY"}, {"name": "tag", "value": "USERS"}, {"name": "story", "value": "Get entity"}, {"name": "subSuite", "value": "Get entity"}, {"name": "epic", "value": "LMS service"}, {"name": "parentSuite", "value": "LMS service"}, {"name": "tag", "value": "REGRESSION"}, {"name": "feature", "value": "Users"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "users"}, {"name": "host", "value": "MacBook-Air-Daniil.local"}, {"name": "thread", "value": "83672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.users.test_users"}], "titlePath": ["tests", "users", "test_users.py", "TestUsers"]}